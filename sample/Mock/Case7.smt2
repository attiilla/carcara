; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=10
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort Nat$ 0)
(declare-sort Num$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Num_set$ 0)
(declare-sort Real_set$ 0)
(declare-sort Num1_bit0$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_set_set$ 0)
(declare-sort Num_num_fun$ 0)
(declare-sort Num_set_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Num_bool_fun$ 0)
(declare-sort Real_set_set$ 0)
(declare-sort Num1_bit0_set$ 0)
(declare-sort Real_bool_fun$ 0)
(declare-sort Real_real_fun$ 0)
(declare-sort Num1_bit0_bool_fun$ 0)
(declare-sort Nat_set_nat_set_fun$ 0)
(declare-sort Real_set_real_set_fun$ 0)
(declare-sort Num1_bit0_num1_bit0_fun$ 0)
(declare-fun uu$ () Real_real_fun$)
(declare-fun dbl$ () Real_real_fun$)
(declare-fun inc$ (Num$) Num$)
(declare-fun one$ () Num$)
(declare-fun sub$ (Num$ Num$) Real)
(declare-fun top$ () Real_set$)
(declare-fun uua$ (Num1_bit0$) Num1_bit0_num1_bit0_fun$)
(declare-fun uub$ (Real) Real_real_fun$)
(declare-fun uuc$ () Real_real_fun$)
(declare-fun uud$ (Nat_set$) Nat_bool_fun$)
(declare-fun uue$ (Num_set$) Num_bool_fun$)
(declare-fun uuf$ (Real_set$) Real_bool_fun$)
(declare-fun uug$ () Nat_set_nat_set_fun$)
(declare-fun uuh$ () Real_set_real_set_fun$)
(declare-fun uui$ () Num1_bit0_num1_bit0_fun$)
(declare-fun uuj$ () Real_real_fun$)
(declare-fun uuk$ () Nat_nat_fun$)
(declare-fun uul$ () Real_bool_fun$)
(declare-fun uum$ () Real_real_fun$)
(declare-fun bit0$ (Num$) Num$)
(declare-fun bitM$ (Num$) Num$)
(declare-fun dbl$a (Num1_bit0$) Num1_bit0$)
(declare-fun one$a () Nat$)
(declare-fun one$b () Nat_set$)
(declare-fun one$c () Real_set$)
(declare-fun one$d () Num1_bit0$)
(declare-fun plus$ (Num1_bit0$ Num1_bit0$) Num1_bit0$)
(declare-fun sub$a (Num$ Num$) Num1_bit0$)
(declare-fun top$a () Num1_bit0_set$)
(declare-fun top$b () Nat_set$)
(declare-fun top$c () Num_set$)
(declare-fun top$d () Real_bool_fun$)
(declare-fun top$e () Bool)
(declare-fun minus$ (Num1_bit0$ Num1_bit0$) Num1_bit0$)
(declare-fun plus$a (Nat$ Nat$) Nat$)
(declare-fun plus$b (Num$ Num$) Num$)
(declare-fun plus$c (Num_set$ Num_set$) Num_set$)
(declare-fun plus$d (Nat_set$ Nat_set$) Nat_set$)
(declare-fun times$ (Real) Real_real_fun$)
(declare-fun inj_on$ (Real_real_fun$ Real_set$) Bool)
(declare-fun member$ (Real Real_set$) Bool)
(declare-fun minus$a (Real_set$ Real_set$) Real_set$)
(declare-fun minus$b (Nat$ Nat$) Nat$)
(declare-fun minus$c (Nat_set$ Nat_set$) Nat_set$)
(declare-fun minus$d (Num_set$ Num_set$) Num_set$)
(declare-fun times$a (Num1_bit0$) Num1_bit0_num1_bit0_fun$)
(declare-fun times$b (Num$) Num_num_fun$)
(declare-fun times$c (Nat$) Nat_nat_fun$)
(declare-fun times$d (Nat_set$) Nat_set_nat_set_fun$)
(declare-fun times$e (Real_set$) Real_set_real_set_fun$)
(declare-fun times$f (Num1_bit0_set$ Num1_bit0_set$) Num1_bit0_set$)
(declare-fun times$g (Nat_set_set$ Nat_set_set$) Nat_set_set$)
(declare-fun times$h (Num_set$ Num_set$) Num_set$)
(declare-fun times$i (Num_set_set$ Num_set_set$) Num_set_set$)
(declare-fun times$j (Real_set_set$ Real_set_set$) Real_set_set$)
(declare-fun uminus$ (Num1_bit0$) Num1_bit0$)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun dbl_dec$ () Real_real_fun$)
(declare-fun fun_app$ (Real_real_fun$ Real) Real)
(declare-fun inj_on$a (Num1_bit0_num1_bit0_fun$ Num1_bit0_set$) Bool)
(declare-fun member$a (Num$ Num_set$) Bool)
(declare-fun member$b (Nat$ Nat_set$) Bool)
(declare-fun member$c (Num1_bit0$ Num1_bit0_set$) Bool)
(declare-fun member$d (Nat_set$ Nat_set_set$) Bool)
(declare-fun member$e (Num_set$ Num_set_set$) Bool)
(declare-fun member$f (Real_set$ Real_set_set$) Bool)
(declare-fun numeral$ (Num$) Real)
(declare-fun uminus$a (Real_set$) Real_set$)
(declare-fun x_coord$ () Real_real_fun$)
(declare-fun collect$a (Num_bool_fun$) Num_set$)
(declare-fun collect$b (Real_bool_fun$) Real_set$)
(declare-fun dbl_dec$a (Num1_bit0$) Num1_bit0$)
(declare-fun fun_app$a (Num1_bit0_num1_bit0_fun$ Num1_bit0$) Num1_bit0$)
(declare-fun fun_app$b (Real_bool_fun$ Real) Bool)
(declare-fun fun_app$c (Num_bool_fun$ Num$) Bool)
(declare-fun fun_app$d (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$e (Real_set_real_set_fun$ Real_set$) Real_set$)
(declare-fun fun_app$f (Nat_set_nat_set_fun$ Nat_set$) Nat_set$)
(declare-fun fun_app$g (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$h (Num_num_fun$ Num$) Num$)
(declare-fun fun_app$i (Num1_bit0_bool_fun$ Num1_bit0$) Bool)
(declare-fun numeral$a (Num$) Nat$)
(declare-fun numeral$b (Num$) Num1_bit0$)
(declare-fun x_coord_inv$ () Real_real_fun$)
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uu$ ?v0) (* 2.0 (fun_app$ x_coord$ (- 1.0 ?v0)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uuj$ ?v0) (* 1.0 ?v0)) :pattern ((fun_app$ uuj$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uum$ ?v0) (- ?v0)) :pattern ((fun_app$ uum$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Num1_bit0$) (?v1 Num1_bit0$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (minus$ ?v1 ?v0)) :pattern ((fun_app$a (uua$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Real) (?v1 Real)) (! (= (fun_app$ (uub$ ?v0) ?v1) (- ?v1 ?v0)) :pattern ((fun_app$ (uub$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 Real_set$) (?v1 Real)) (! (= (fun_app$b (uuf$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$b (uuf$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 Num_set$) (?v1 Num$)) (! (= (fun_app$c (uue$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$c (uue$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat$)) (! (= (fun_app$d (uud$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$d (uud$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 Num1_bit0$)) (! (= (fun_app$a uui$ ?v0) ?v0) :pattern ((fun_app$a uui$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uuc$ ?v0) ?v0) :pattern ((fun_app$ uuc$ ?v0)))) :named a9))
(assert (! (forall ((?v0 Real_set$)) (! (= (fun_app$e uuh$ ?v0) ?v0) :pattern ((fun_app$e uuh$ ?v0)))) :named a10))
(assert (! (forall ((?v0 Nat_set$)) (! (= (fun_app$f uug$ ?v0) ?v0) :pattern ((fun_app$f uug$ ?v0)))) :named a11))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$g uuk$ ?v0) ?v0) :pattern ((fun_app$g uuk$ ?v0)))) :named a12))
(assert (! (forall ((?v0 Real)) (! (= (fun_app$b uul$ ?v0) true) :pattern ((fun_app$b uul$ ?v0)))) :named a13))
(assert (! (not (inj_on$ uu$ top$)) :named a14))
(assert (! (forall ((?v0 Num$)) (= (= (numeral$ ?v0) 1.0) (= ?v0 one$))) :named a15))
(assert (! (forall ((?v0 Num$)) (= (= (numeral$a ?v0) one$a) (= ?v0 one$))) :named a16))
(assert (! (forall ((?v0 Num$)) (= (= 1.0 (numeral$ ?v0)) (= one$ ?v0))) :named a17))
(assert (! (forall ((?v0 Num$)) (= (= one$a (numeral$a ?v0)) (= one$ ?v0))) :named a18))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Num$)) (= (fun_app$ (times$ (- ?v0 ?v1)) (numeral$ ?v2)) (- (fun_app$ (times$ ?v0) (numeral$ ?v2)) (fun_app$ (times$ ?v1) (numeral$ ?v2))))) :named a19))
(assert (! (forall ((?v0 Num1_bit0$) (?v1 Num1_bit0$) (?v2 Num$)) (= (fun_app$a (times$a (minus$ ?v0 ?v1)) (numeral$b ?v2)) (minus$ (fun_app$a (times$a ?v0) (numeral$b ?v2)) (fun_app$a (times$a ?v1) (numeral$b ?v2))))) :named a20))
(assert (! (forall ((?v0 Num$) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ (numeral$ ?v0)) (- ?v1 ?v2)) (- (fun_app$ (times$ (numeral$ ?v0)) ?v1) (fun_app$ (times$ (numeral$ ?v0)) ?v2)))) :named a21))
(assert (! (forall ((?v0 Num$) (?v1 Num1_bit0$) (?v2 Num1_bit0$)) (= (fun_app$a (times$a (numeral$b ?v0)) (minus$ ?v1 ?v2)) (minus$ (fun_app$a (times$a (numeral$b ?v0)) ?v1) (fun_app$a (times$a (numeral$b ?v0)) ?v2)))) :named a22))
(assert (! (forall ((?v0 Num$)) (= (= (bit0$ ?v0) one$) false)) :named a23))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit0$ ?v0)) false)) :named a24))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Real)) (= (fun_app$ (times$ (numeral$ ?v0)) (fun_app$ (times$ (numeral$ ?v1)) ?v2)) (fun_app$ (times$ (numeral$ (fun_app$h (times$b ?v0) ?v1))) ?v2))) :named a25))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Nat$)) (= (fun_app$g (times$c (numeral$a ?v0)) (fun_app$g (times$c (numeral$a ?v1)) ?v2)) (fun_app$g (times$c (numeral$a (fun_app$h (times$b ?v0) ?v1))) ?v2))) :named a26))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Num1_bit0$)) (= (fun_app$a (times$a (numeral$b ?v0)) (fun_app$a (times$a (numeral$b ?v1)) ?v2)) (fun_app$a (times$a (numeral$b (fun_app$h (times$b ?v0) ?v1))) ?v2))) :named a27))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (fun_app$ (times$ (numeral$ ?v0)) (numeral$ ?v1)) (numeral$ (fun_app$h (times$b ?v0) ?v1)))) :named a28))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (fun_app$g (times$c (numeral$a ?v0)) (numeral$a ?v1)) (numeral$a (fun_app$h (times$b ?v0) ?v1)))) :named a29))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (fun_app$a (times$a (numeral$b ?v0)) (numeral$b ?v1)) (numeral$b (fun_app$h (times$b ?v0) ?v1)))) :named a30))
(assert (! (forall ((?v0 Nat_set$)) (= (fun_app$f (times$d one$b) ?v0) ?v0)) :named a31))
(assert (! (forall ((?v0 Real_set$)) (= (fun_app$e (times$e one$c) ?v0) ?v0)) :named a32))
(assert (! (forall ((?v0 Num1_bit0$)) (= (fun_app$a (times$a one$d) ?v0) ?v0)) :named a33))
(assert (! (forall ((?v0 Real)) (= (* 1.0 ?v0) ?v0)) :named a34))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$g (times$c one$a) ?v0) ?v0)) :named a35))
(assert (! (forall ((?v0 Nat_set$)) (= (fun_app$f (times$d ?v0) one$b) ?v0)) :named a36))
(assert (! (forall ((?v0 Real_set$)) (= (fun_app$e (times$e ?v0) one$c) ?v0)) :named a37))
(assert (! (forall ((?v0 Num1_bit0$)) (= (fun_app$a (times$a ?v0) one$d) ?v0)) :named a38))
(assert (! (forall ((?v0 Real)) (= (* ?v0 1.0) ?v0)) :named a39))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$g (times$c ?v0) one$a) ?v0)) :named a40))
(assert (! (forall ((?v0 Real)) (= (* 1.0 ?v0) ?v0)) :named a41))
(assert (! (forall ((?v0 Num1_bit0$)) (inj_on$a (uua$ ?v0) top$a)) :named a42))
(assert (! (forall ((?v0 Real)) (inj_on$ (uub$ ?v0) top$)) :named a43))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (numeral$ ?v0) (numeral$ ?v1)) (= ?v0 ?v1))) :named a44))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (numeral$a ?v0) (numeral$a ?v1)) (= ?v0 ?v1))) :named a45))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit0$ ?v1)) (= ?v0 ?v1))) :named a46))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit0$ ?v1)) (= ?v0 ?v1))) :named a47))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (! (= (fun_app$h (times$b (bit0$ ?v0)) (bit0$ ?v1)) (bit0$ (bit0$ (fun_app$h (times$b ?v0) ?v1)))) :pattern ((fun_app$h (times$b (bit0$ ?v0)) (bit0$ ?v1))))) :named a48))
(assert (! (forall ((?v0 Num$)) (! (= (fun_app$h (times$b ?v0) one$) ?v0) :pattern ((times$b ?v0)))) :named a49))
(assert (! (forall ((?v0 Num$)) (! (= (fun_app$h (times$b one$) ?v0) ?v0) :pattern ((fun_app$h (times$b one$) ?v0)))) :named a50))
(assert (! (forall ((?v0 Num$)) (! (= (fun_app$h (times$b (bit0$ one$)) ?v0) (bit0$ ?v0)) :pattern ((fun_app$h (times$b (bit0$ one$)) ?v0)))) :named a51))
(assert (! (= (numeral$a one$) one$a) :named a52))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real_set$) (?v2 Real_set$)) (=> (inj_on$ ?v0 ?v1) (inj_on$ ?v0 (minus$a ?v1 ?v2)))) :named a53))
(assert (! (forall ((?v0 Num1_bit0$)) (or (= ?v0 one$d) (= ?v0 (numeral$b (bit0$ one$))))) :named a54))
(assert (! (forall ((?v0 Num1_bit0_bool_fun$)) (= (forall ((?v1 Num1_bit0$)) (fun_app$i ?v0 ?v1)) (and (fun_app$i ?v0 one$d) (fun_app$i ?v0 (numeral$b (bit0$ one$)))))) :named a55))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ ?v0) (fun_app$ (times$ ?v1) ?v2)) (fun_app$ (times$ ?v1) (fun_app$ (times$ ?v0) ?v2)))) :named a56))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ ?v0) (fun_app$ (times$ ?v1) ?v2)) (fun_app$ (times$ (fun_app$ (times$ ?v0) ?v1)) ?v2))) :named a57))
(assert (! (forall ((?v0 Num1_bit0$) (?v1 Num1_bit0$) (?v2 Num1_bit0$)) (= (fun_app$a (times$a ?v0) (fun_app$a (times$a ?v1) ?v2)) (fun_app$a (times$a ?v1) (fun_app$a (times$a ?v0) ?v2)))) :named a58))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (fun_app$f (times$d ?v0) (fun_app$f (times$d ?v1) ?v2)) (fun_app$f (times$d ?v1) (fun_app$f (times$d ?v0) ?v2)))) :named a59))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_set$) (?v2 Real_set$)) (= (fun_app$e (times$e ?v0) (fun_app$e (times$e ?v1) ?v2)) (fun_app$e (times$e ?v1) (fun_app$e (times$e ?v0) ?v2)))) :named a60))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ ?v0) (fun_app$ (times$ ?v1) ?v2)) (fun_app$ (times$ ?v1) (fun_app$ (times$ ?v0) ?v2)))) :named a61))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$g (times$c ?v0) (fun_app$g (times$c ?v1) ?v2)) (fun_app$g (times$c ?v1) (fun_app$g (times$c ?v0) ?v2)))) :named a62))
(assert (! (forall ((?v0 Num1_bit0$) (?v1 Num1_bit0$)) (= (fun_app$a (times$a ?v0) ?v1) (fun_app$a (times$a ?v1) ?v0))) :named a63))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$)) (= (fun_app$f (times$d ?v0) ?v1) (fun_app$f (times$d ?v1) ?v0))) :named a64))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_set$)) (= (fun_app$e (times$e ?v0) ?v1) (fun_app$e (times$e ?v1) ?v0))) :named a65))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (fun_app$ (times$ ?v0) ?v1) (fun_app$ (times$ ?v1) ?v0))) :named a66))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$g (times$c ?v0) ?v1) (fun_app$g (times$c ?v1) ?v0))) :named a67))
(assert (! (forall ((?v0 Num1_bit0$) (?v1 Num1_bit0$) (?v2 Num1_bit0$)) (= (fun_app$a (times$a (fun_app$a (times$a ?v0) ?v1)) ?v2) (fun_app$a (times$a ?v0) (fun_app$a (times$a ?v1) ?v2)))) :named a68))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (fun_app$f (times$d (fun_app$f (times$d ?v0) ?v1)) ?v2) (fun_app$f (times$d ?v0) (fun_app$f (times$d ?v1) ?v2)))) :named a69))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_set$) (?v2 Real_set$)) (= (fun_app$e (times$e (fun_app$e (times$e ?v0) ?v1)) ?v2) (fun_app$e (times$e ?v0) (fun_app$e (times$e ?v1) ?v2)))) :named a70))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ (fun_app$ (times$ ?v0) ?v1)) ?v2) (fun_app$ (times$ ?v0) (fun_app$ (times$ ?v1) ?v2)))) :named a71))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$g (times$c (fun_app$g (times$c ?v0) ?v1)) ?v2) (fun_app$g (times$c ?v0) (fun_app$g (times$c ?v1) ?v2)))) :named a72))
(assert (! (forall ((?v0 Num1_bit0$) (?v1 Num1_bit0$) (?v2 Num1_bit0$)) (= (fun_app$a (times$a (fun_app$a (times$a ?v0) ?v1)) ?v2) (fun_app$a (times$a ?v0) (fun_app$a (times$a ?v1) ?v2)))) :named a73))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (fun_app$f (times$d (fun_app$f (times$d ?v0) ?v1)) ?v2) (fun_app$f (times$d ?v0) (fun_app$f (times$d ?v1) ?v2)))) :named a74))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_set$) (?v2 Real_set$)) (= (fun_app$e (times$e (fun_app$e (times$e ?v0) ?v1)) ?v2) (fun_app$e (times$e ?v0) (fun_app$e (times$e ?v1) ?v2)))) :named a75))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ (fun_app$ (times$ ?v0) ?v1)) ?v2) (fun_app$ (times$ ?v0) (fun_app$ (times$ ?v1) ?v2)))) :named a76))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$g (times$c (fun_app$g (times$c ?v0) ?v1)) ?v2) (fun_app$g (times$c ?v0) (fun_app$g (times$c ?v1) ?v2)))) :named a77))
(assert (! (forall ((?v0 Real)) (= (= 1.0 ?v0) (= ?v0 1.0))) :named a78))
(assert (! (forall ((?v0 Nat$)) (= (= one$a ?v0) (= ?v0 one$a))) :named a79))
(assert (! (forall ((?v0 Num1_bit0$)) (= (= one$d ?v0) (= ?v0 one$d))) :named a80))
(assert (! (forall ((?v0 Num1_bit0$) (?v1 Num1_bit0$) (?v2 Num1_bit0$)) (= (minus$ (minus$ ?v0 ?v1) ?v2) (minus$ (minus$ ?v0 ?v2) ?v1))) :named a81))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (- (- ?v0 ?v1) ?v2) (- (- ?v0 ?v2) ?v1))) :named a82))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$b (minus$b ?v0 ?v1) ?v2) (minus$b (minus$b ?v0 ?v2) ?v1))) :named a83))
(assert (! (forall ((?v0 Num1_bit0$) (?v1 Num1_bit0$) (?v2 Num1_bit0$) (?v3 Num1_bit0$)) (=> (= (minus$ ?v0 ?v1) (minus$ ?v2 ?v3)) (= (= ?v0 ?v1) (= ?v2 ?v3)))) :named a84))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real) (?v3 Real)) (=> (= (- ?v0 ?v1) (- ?v2 ?v3)) (= (= ?v0 ?v1) (= ?v2 ?v3)))) :named a85))
(assert (! (= (= one$ one$) true) :named a86))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_real_fun$) (?v2 Real_real_fun$)) (=> (forall ((?v3 Real)) (=> (member$ ?v3 ?v0) (= (fun_app$ ?v1 (fun_app$ ?v2 ?v3)) ?v3))) (inj_on$ ?v2 ?v0))) :named a87))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real_set$) (?v2 Real) (?v3 Real)) (=> (and (inj_on$ ?v0 ?v1) (and (not (= ?v2 ?v3)) (and (member$ ?v2 ?v1) (member$ ?v3 ?v1)))) (not (= (fun_app$ ?v0 ?v2) (fun_app$ ?v0 ?v3))))) :named a88))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real_set$) (?v2 Real) (?v3 Real)) (=> (and (inj_on$ ?v0 ?v1) (and (member$ ?v2 ?v1) (member$ ?v3 ?v1))) (= (= (fun_app$ ?v0 ?v2) (fun_app$ ?v0 ?v3)) (= ?v2 ?v3)))) :named a89))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_real_fun$) (?v2 Real_real_fun$)) (=> (forall ((?v3 Real)) (=> (member$ ?v3 ?v0) (= (fun_app$ ?v1 ?v3) (fun_app$ ?v2 ?v3)))) (= (inj_on$ ?v1 ?v0) (inj_on$ ?v2 ?v0)))) :named a90))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real_set$)) (= (inj_on$ ?v0 ?v1) (forall ((?v2 Real)) (=> (member$ ?v2 ?v1) (forall ((?v3 Real)) (=> (and (member$ ?v3 ?v1) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v0 ?v3))) (= ?v2 ?v3))))))) :named a91))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_real_fun$)) (=> (forall ((?v2 Real) (?v3 Real)) (=> (and (member$ ?v2 ?v0) (and (member$ ?v3 ?v0) (= (fun_app$ ?v1 ?v2) (fun_app$ ?v1 ?v3)))) (= ?v2 ?v3))) (inj_on$ ?v1 ?v0))) :named a92))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real_set$) (?v2 Real) (?v3 Real)) (=> (and (inj_on$ ?v0 ?v1) (and (= (fun_app$ ?v0 ?v2) (fun_app$ ?v0 ?v3)) (and (member$ ?v2 ?v1) (member$ ?v3 ?v1)))) (= ?v2 ?v3))) :named a93))
(assert (! (forall ((?v0 Real_set$)) (inj_on$ uuc$ ?v0)) :named a94))
(assert (! (forall ((?v0 Nat_set$)) (= (fun_app$f (times$d ?v0) one$b) ?v0)) :named a95))
(assert (! (forall ((?v0 Real_set$)) (= (fun_app$e (times$e ?v0) one$c) ?v0)) :named a96))
(assert (! (forall ((?v0 Num1_bit0$)) (= (fun_app$a (times$a ?v0) one$d) ?v0)) :named a97))
(assert (! (forall ((?v0 Real)) (= (* ?v0 1.0) ?v0)) :named a98))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$g (times$c ?v0) one$a) ?v0)) :named a99))
(assert (! (forall ((?v0 Nat_set$)) (= (fun_app$f (times$d one$b) ?v0) ?v0)) :named a100))
(assert (! (forall ((?v0 Real_set$)) (= (fun_app$e (times$e one$c) ?v0) ?v0)) :named a101))
(assert (! (forall ((?v0 Num1_bit0$)) (= (fun_app$a (times$a one$d) ?v0) ?v0)) :named a102))
(assert (! (forall ((?v0 Real)) (= (* 1.0 ?v0) ?v0)) :named a103))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$g (times$c one$a) ?v0) ?v0)) :named a104))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_bool_fun$)) (= (member$b ?v0 (collect$ ?v1)) (fun_app$d ?v1 ?v0))) :named a105))
(assert (! (forall ((?v0 Num$) (?v1 Num_bool_fun$)) (= (member$a ?v0 (collect$a ?v1)) (fun_app$c ?v1 ?v0))) :named a106))
(assert (! (forall ((?v0 Real) (?v1 Real_bool_fun$)) (= (member$ ?v0 (collect$b ?v1)) (fun_app$b ?v1 ?v0))) :named a107))
(assert (! (forall ((?v0 Nat_set$)) (= (collect$ (uud$ ?v0)) ?v0)) :named a108))
(assert (! (forall ((?v0 Num_set$)) (= (collect$a (uue$ ?v0)) ?v0)) :named a109))
(assert (! (forall ((?v0 Real_set$)) (= (collect$b (uuf$ ?v0)) ?v0)) :named a110))
(assert (! (forall ((?v0 Real_bool_fun$) (?v1 Real_bool_fun$)) (=> (forall ((?v2 Real)) (= (fun_app$b ?v0 ?v2) (fun_app$b ?v1 ?v2))) (= (collect$b ?v0) (collect$b ?v1)))) :named a111))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ ?v0) (- ?v1 ?v2)) (- (fun_app$ (times$ ?v0) ?v1) (fun_app$ (times$ ?v0) ?v2)))) :named a112))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ (- ?v0 ?v1)) ?v2) (- (fun_app$ (times$ ?v0) ?v2) (fun_app$ (times$ ?v1) ?v2)))) :named a113))
(assert (! (forall ((?v0 Real_real_fun$)) (= (inj_on$ ?v0 top$) (forall ((?v1 Real) (?v2 Real)) (=> (= (fun_app$ ?v0 ?v1) (fun_app$ ?v0 ?v2)) (= ?v1 ?v2))))) :named a114))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real) (?v2 Real)) (=> (inj_on$ ?v0 top$) (= (= (fun_app$ ?v0 ?v1) (fun_app$ ?v0 ?v2)) (= ?v1 ?v2)))) :named a115))
(assert (! (forall ((?v0 Real_real_fun$)) (=> (forall ((?v1 Real) (?v2 Real)) (=> (= (fun_app$ ?v0 ?v1) (fun_app$ ?v0 ?v2)) (= ?v1 ?v2))) (inj_on$ ?v0 top$))) :named a116))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real) (?v2 Real)) (=> (and (inj_on$ ?v0 top$) (= (fun_app$ ?v0 ?v1) (fun_app$ ?v0 ?v2))) (= ?v1 ?v2))) :named a117))
(assert (! (forall ((?v0 Real)) (= (* ?v0 1.0) ?v0)) :named a118))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$g (times$c ?v0) (numeral$a one$)) ?v0)) :named a119))
(assert (! (forall ((?v0 Num1_bit0$)) (= (fun_app$a (times$a ?v0) (numeral$b one$)) ?v0)) :named a120))
(assert (! (forall ((?v0 Real)) (= (* 1.0 ?v0) ?v0)) :named a121))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$g (times$c (numeral$a one$)) ?v0) ?v0)) :named a122))
(assert (! (forall ((?v0 Num1_bit0$)) (= (fun_app$a (times$a (numeral$b one$)) ?v0) ?v0)) :named a123))
(assert (! (= 1.0 1.0) :named a124))
(assert (! (= (numeral$a one$) one$a) :named a125))
(assert (! (= (numeral$b one$) one$d) :named a126))
(assert (! (= (fun_app$ dbl$ 1.0) 2.0) :named a127))
(assert (! (= (dbl$a one$d) (numeral$b (bit0$ one$))) :named a128))
(assert (! (forall ((?v0 Real)) (= (fun_app$ x_coord$ (fun_app$ x_coord_inv$ ?v0)) ?v0)) :named a129))
(assert (! (forall ((?v0 Real)) (= (fun_app$ x_coord_inv$ (fun_app$ x_coord$ ?v0)) ?v0)) :named a130))
(assert (! (forall ((?v0 Nat$)) (= (member$b ?v0 top$b) true)) :named a131))
(assert (! (forall ((?v0 Num$)) (= (member$a ?v0 top$c) true)) :named a132))
(assert (! (forall ((?v0 Real)) (= (member$ ?v0 top$) true)) :named a133))
(assert (! (forall ((?v0 Nat$)) (member$b ?v0 top$b)) :named a134))
(assert (! (forall ((?v0 Num$)) (member$a ?v0 top$c)) :named a135))
(assert (! (forall ((?v0 Real)) (member$ ?v0 top$)) :named a136))
(assert (! (forall ((?v0 Real)) (! (= (fun_app$b top$d ?v0) top$e) :pattern ((fun_app$b top$d ?v0)))) :named a137))
(assert (! (forall ((?v0 Num1_bit0$) (?v1 Num1_bit0_set$) (?v2 Num1_bit0$) (?v3 Num1_bit0_set$)) (=> (and (member$c ?v0 ?v1) (member$c ?v2 ?v3)) (member$c (fun_app$a (times$a ?v0) ?v2) (times$f ?v1 ?v3)))) :named a138))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set_set$) (?v2 Nat_set$) (?v3 Nat_set_set$)) (=> (and (member$d ?v0 ?v1) (member$d ?v2 ?v3)) (member$d (fun_app$f (times$d ?v0) ?v2) (times$g ?v1 ?v3)))) :named a139))
(assert (! (forall ((?v0 Num_set$) (?v1 Num_set_set$) (?v2 Num_set$) (?v3 Num_set_set$)) (=> (and (member$e ?v0 ?v1) (member$e ?v2 ?v3)) (member$e (times$h ?v0 ?v2) (times$i ?v1 ?v3)))) :named a140))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_set_set$) (?v2 Real_set$) (?v3 Real_set_set$)) (=> (and (member$f ?v0 ?v1) (member$f ?v2 ?v3)) (member$f (fun_app$e (times$e ?v0) ?v2) (times$j ?v1 ?v3)))) :named a141))
(assert (! (forall ((?v0 Real) (?v1 Real_set$) (?v2 Real) (?v3 Real_set$)) (=> (and (member$ ?v0 ?v1) (member$ ?v2 ?v3)) (member$ (fun_app$ (times$ ?v0) ?v2) (fun_app$e (times$e ?v1) ?v3)))) :named a142))
(assert (! (forall ((?v0 Num$) (?v1 Num_set$) (?v2 Num$) (?v3 Num_set$)) (=> (and (member$a ?v0 ?v1) (member$a ?v2 ?v3)) (member$a (fun_app$h (times$b ?v0) ?v2) (times$h ?v1 ?v3)))) :named a143))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (member$b ?v0 ?v1) (member$b ?v2 ?v3)) (member$b (fun_app$g (times$c ?v0) ?v2) (fun_app$f (times$d ?v1) ?v3)))) :named a144))
(assert (! (= uug$ (times$d one$b)) :named a145))
(assert (! (= uuh$ (times$e one$c)) :named a146))
(assert (! (= uui$ (times$a one$d)) :named a147))
(assert (! (= uuc$ uuj$) :named a148))
(assert (! (= uuk$ (times$c one$a)) :named a149))
(assert (! (forall ((?v0 Num$)) (not (= one$ (bit0$ ?v0)))) :named a150))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_set$)) (=> (and (member$b ?v0 ?v1) (not (member$b ?v0 ?v2))) (member$b ?v0 (minus$c ?v1 ?v2)))) :named a151))
(assert (! (forall ((?v0 Num$) (?v1 Num_set$) (?v2 Num_set$)) (=> (and (member$a ?v0 ?v1) (not (member$a ?v0 ?v2))) (member$a ?v0 (minus$d ?v1 ?v2)))) :named a152))
(assert (! (forall ((?v0 Real) (?v1 Real_set$) (?v2 Real_set$)) (=> (and (member$ ?v0 ?v1) (not (member$ ?v0 ?v2))) (member$ ?v0 (minus$a ?v1 ?v2)))) :named a153))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (member$b ?v0 (minus$c ?v1 ?v2)) (and (member$b ?v0 ?v1) (not (member$b ?v0 ?v2))))) :named a154))
(assert (! (forall ((?v0 Num$) (?v1 Num_set$) (?v2 Num_set$)) (= (member$a ?v0 (minus$d ?v1 ?v2)) (and (member$a ?v0 ?v1) (not (member$a ?v0 ?v2))))) :named a155))
(assert (! (forall ((?v0 Real) (?v1 Real_set$) (?v2 Real_set$)) (= (member$ ?v0 (minus$a ?v1 ?v2)) (and (member$ ?v0 ?v1) (not (member$ ?v0 ?v2))))) :named a156))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_set$)) (= (minus$a (minus$a ?v0 ?v1) ?v1) (minus$a ?v0 ?v1))) :named a157))
(assert (! (forall ((?v0 Num$)) (= (fun_app$ dbl$ (numeral$ ?v0)) (numeral$ (bit0$ ?v0)))) :named a158))
(assert (! (forall ((?v0 Num$)) (= (dbl$a (numeral$b ?v0)) (numeral$b (bit0$ ?v0)))) :named a159))
(assert (! (= top$ (collect$b top$d)) :named a160))
(assert (! (forall ((?v0 Real) (?v1 Real_set$) (?v2 Real_set$)) (=> (and (member$ ?v0 (fun_app$e (times$e ?v1) ?v2)) (forall ((?v3 Real) (?v4 Real)) (=> (and (= ?v0 (fun_app$ (times$ ?v3) ?v4)) (and (member$ ?v3 ?v1) (member$ ?v4 ?v2))) false))) false)) :named a161))
(assert (! (forall ((?v0 Num$) (?v1 Num_set$) (?v2 Num_set$)) (=> (and (member$a ?v0 (times$h ?v1 ?v2)) (forall ((?v3 Num$) (?v4 Num$)) (=> (and (= ?v0 (fun_app$h (times$b ?v3) ?v4)) (and (member$a ?v3 ?v1) (member$a ?v4 ?v2))) false))) false)) :named a162))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_set$)) (=> (and (member$b ?v0 (fun_app$f (times$d ?v1) ?v2)) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (and (= ?v0 (fun_app$g (times$c ?v3) ?v4)) (and (member$b ?v3 ?v1) (member$b ?v4 ?v2))) false))) false)) :named a163))
(assert (! (forall ((?v0 Real_set$)) (=> (forall ((?v1 Real)) (member$ ?v1 ?v0)) (= top$ ?v0))) :named a164))
(assert (! (exists ((?v0 Real)) (member$ ?v0 top$)) :named a165))
(assert (! (= top$ (collect$b uul$)) :named a166))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ (- ?v0 ?v1)) ?v2) (- (fun_app$ (times$ ?v0) ?v2) (fun_app$ (times$ ?v1) ?v2)))) :named a167))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ ?v0) (- ?v1 ?v2)) (- (fun_app$ (times$ ?v0) ?v1) (fun_app$ (times$ ?v0) ?v2)))) :named a168))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ (- ?v0 ?v1)) ?v2) (- (fun_app$ (times$ ?v0) ?v2) (fun_app$ (times$ ?v1) ?v2)))) :named a169))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$g (times$c (minus$b ?v0 ?v1)) ?v2) (minus$b (fun_app$g (times$c ?v0) ?v2) (fun_app$g (times$c ?v1) ?v2)))) :named a170))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ ?v0) (- ?v1 ?v2)) (- (fun_app$ (times$ ?v0) ?v1) (fun_app$ (times$ ?v0) ?v2)))) :named a171))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$g (times$c ?v0) (minus$b ?v1 ?v2)) (minus$b (fun_app$g (times$c ?v0) ?v1) (fun_app$g (times$c ?v0) ?v2)))) :named a172))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= one$a (fun_app$g (times$c ?v0) ?v1)) (and (= ?v0 one$a) (= ?v1 one$a)))) :named a173))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$g (times$c ?v0) ?v1) one$a) (and (= ?v0 one$a) (= ?v1 one$a)))) :named a174))
(assert (! (forall ((?v0 Real_bool_fun$) (?v1 Real) (?v2 Real_bool_fun$)) (=> (and (forall ((?v3 Real) (?v4 Real)) (= (fun_app$b ?v0 ?v3) (fun_app$b ?v0 (- ?v3 (fun_app$ (times$ ?v4) ?v1))))) (forall ((?v3 Real) (?v4 Real)) (= (fun_app$b ?v2 ?v3) (fun_app$b ?v2 (- ?v3 (fun_app$ (times$ ?v4) ?v1)))))) (forall ((?v3 Real) (?v4 Real)) (= (or (fun_app$b ?v0 ?v3) (fun_app$b ?v2 ?v3)) (or (fun_app$b ?v0 (- ?v3 (fun_app$ (times$ ?v4) ?v1))) (fun_app$b ?v2 (- ?v3 (fun_app$ (times$ ?v4) ?v1)))))))) :named a175))
(assert (! (forall ((?v0 Real_bool_fun$) (?v1 Real) (?v2 Real_bool_fun$)) (=> (and (forall ((?v3 Real) (?v4 Real)) (= (fun_app$b ?v0 ?v3) (fun_app$b ?v0 (- ?v3 (fun_app$ (times$ ?v4) ?v1))))) (forall ((?v3 Real) (?v4 Real)) (= (fun_app$b ?v2 ?v3) (fun_app$b ?v2 (- ?v3 (fun_app$ (times$ ?v4) ?v1)))))) (forall ((?v3 Real) (?v4 Real)) (= (and (fun_app$b ?v0 ?v3) (fun_app$b ?v2 ?v3)) (and (fun_app$b ?v0 (- ?v3 (fun_app$ (times$ ?v4) ?v1))) (fun_app$b ?v2 (- ?v3 (fun_app$ (times$ ?v4) ?v1)))))))) :named a176))
(assert (! (= (fun_app$ dbl$ (- 1.0)) (- 2.0)) :named a177))
(assert (! (= (dbl$a (uminus$ one$d)) (uminus$ (numeral$b (bit0$ one$)))) :named a178))
(assert (! (= (- 1.0 (- 1.0)) 2.0) :named a179))
(assert (! (= (minus$ one$d (uminus$ one$d)) (numeral$b (bit0$ one$))) :named a180))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (fun_app$ (times$ ?v0) (- ?v1)) (- (fun_app$ (times$ ?v0) ?v1)))) :named a181))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (fun_app$ (times$ (- ?v0)) ?v1) (- (fun_app$ (times$ ?v0) ?v1)))) :named a182))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (fun_app$ (times$ ?v0) (- ?v1)) (- (fun_app$ (times$ ?v0) ?v1)))) :named a183))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (fun_app$ (times$ (- ?v0)) (- ?v1)) (fun_app$ (times$ ?v0) ?v1))) :named a184))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (fun_app$ (times$ (- ?v0)) ?v1) (- (fun_app$ (times$ ?v0) ?v1)))) :named a185))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (- (- ?v0 ?v1)) (- ?v1 ?v0))) :named a186))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (- (numeral$ ?v0)) (- (numeral$ ?v1))) (= ?v0 ?v1))) :named a187))
(assert (! (forall ((?v0 Real_set$)) (inj_on$ uum$ ?v0)) :named a188))
(assert (! (forall ((?v0 Num1_bit0$)) (= (fun_app$a (times$a ?v0) (uminus$ one$d)) (uminus$ ?v0))) :named a189))
(assert (! (forall ((?v0 Real)) (= (* ?v0 (- 1.0)) (- ?v0))) :named a190))
(assert (! (forall ((?v0 Num1_bit0$)) (= (fun_app$a (times$a (uminus$ one$d)) ?v0) (uminus$ ?v0))) :named a191))
(assert (! (forall ((?v0 Real)) (= (* (- 1.0) ?v0) (- ?v0))) :named a192))
(assert (! (forall ((?v0 Num$)) (= (fun_app$ dbl$ (- (numeral$ ?v0))) (- (fun_app$ dbl$ (numeral$ ?v0))))) :named a193))
(assert (! (forall ((?v0 Num$)) (= (dbl$a (uminus$ (numeral$b ?v0))) (uminus$ (dbl$a (numeral$b ?v0))))) :named a194))
(assert (! (forall ((?v0 Num$)) (= (= (- (numeral$ ?v0)) (- 1.0)) (= ?v0 one$))) :named a195))
(assert (! (forall ((?v0 Num$)) (= (= (- 1.0) (- (numeral$ ?v0))) (= ?v0 one$))) :named a196))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (fun_app$ (times$ (- (numeral$ ?v0))) (- (numeral$ ?v1))) (numeral$ (fun_app$h (times$b ?v0) ?v1)))) :named a197))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (fun_app$a (times$a (uminus$ (numeral$b ?v0))) (uminus$ (numeral$b ?v1))) (numeral$b (fun_app$h (times$b ?v0) ?v1)))) :named a198))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (fun_app$ (times$ (- (numeral$ ?v0))) (numeral$ ?v1)) (- (numeral$ (fun_app$h (times$b ?v0) ?v1))))) :named a199))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (fun_app$a (times$a (uminus$ (numeral$b ?v0))) (numeral$b ?v1)) (uminus$ (numeral$b (fun_app$h (times$b ?v0) ?v1))))) :named a200))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (fun_app$ (times$ (numeral$ ?v0)) (- (numeral$ ?v1))) (- (numeral$ (fun_app$h (times$b ?v0) ?v1))))) :named a201))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (fun_app$a (times$a (numeral$b ?v0)) (uminus$ (numeral$b ?v1))) (uminus$ (numeral$b (fun_app$h (times$b ?v0) ?v1))))) :named a202))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Real)) (= (fun_app$ (times$ (- (numeral$ ?v0))) (fun_app$ (times$ (numeral$ ?v1)) ?v2)) (fun_app$ (times$ (- (numeral$ (fun_app$h (times$b ?v0) ?v1)))) ?v2))) :named a203))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Num1_bit0$)) (= (fun_app$a (times$a (uminus$ (numeral$b ?v0))) (fun_app$a (times$a (numeral$b ?v1)) ?v2)) (fun_app$a (times$a (uminus$ (numeral$b (fun_app$h (times$b ?v0) ?v1)))) ?v2))) :named a204))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Real)) (= (fun_app$ (times$ (numeral$ ?v0)) (fun_app$ (times$ (- (numeral$ ?v1))) ?v2)) (fun_app$ (times$ (- (numeral$ (fun_app$h (times$b ?v0) ?v1)))) ?v2))) :named a205))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Num1_bit0$)) (= (fun_app$a (times$a (numeral$b ?v0)) (fun_app$a (times$a (uminus$ (numeral$b ?v1))) ?v2)) (fun_app$a (times$a (uminus$ (numeral$b (fun_app$h (times$b ?v0) ?v1)))) ?v2))) :named a206))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Real)) (= (fun_app$ (times$ (- (numeral$ ?v0))) (fun_app$ (times$ (- (numeral$ ?v1))) ?v2)) (fun_app$ (times$ (numeral$ (fun_app$h (times$b ?v0) ?v1))) ?v2))) :named a207))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Num1_bit0$)) (= (fun_app$a (times$a (uminus$ (numeral$b ?v0))) (fun_app$a (times$a (uminus$ (numeral$b ?v1))) ?v2)) (fun_app$a (times$a (numeral$b (fun_app$h (times$b ?v0) ?v1))) ?v2))) :named a208))
(assert (! (= (- (- 1.0) 1.0) (- 2.0)) :named a209))
(assert (! (= (minus$ (uminus$ one$d) one$d) (uminus$ (numeral$b (bit0$ one$)))) :named a210))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$g (times$c (minus$b ?v0 ?v1)) ?v2) (minus$b (fun_app$g (times$c ?v0) ?v2) (fun_app$g (times$c ?v1) ?v2)))) :named a211))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$g (times$c ?v0) (minus$b ?v1 ?v2)) (minus$b (fun_app$g (times$c ?v0) ?v1) (fun_app$g (times$c ?v0) ?v2)))) :named a212))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (fun_app$ (times$ (- ?v0)) ?v1) (fun_app$ (times$ ?v0) (- ?v1)))) :named a213))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (= (fun_app$ (times$ ?v0) ?v0) (fun_app$ (times$ ?v1) ?v1)) (or (= ?v0 ?v1) (= ?v0 (- ?v1))))) :named a214))
(assert (! (not (= 1.0 (- 1.0))) :named a215))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (- (- ?v0) ?v1) (- (- ?v1) ?v0))) :named a216))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (not (= (numeral$ ?v0) (- (numeral$ ?v1))))) :named a217))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (not (= (- (numeral$ ?v0)) (numeral$ ?v1)))) :named a218))
(assert (! (forall ((?v0 Real)) (= (= (fun_app$ (times$ ?v0) ?v0) 1.0) (or (= ?v0 1.0) (= ?v0 (- 1.0))))) :named a219))
(assert (! (forall ((?v0 Num$) (?v1 Real)) (= (fun_app$ (times$ (numeral$ ?v0)) (- ?v1)) (fun_app$ (times$ ?v1) (- (numeral$ ?v0))))) :named a220))
(assert (! (forall ((?v0 Num$) (?v1 Num1_bit0$)) (= (fun_app$a (times$a (numeral$b ?v0)) (uminus$ ?v1)) (fun_app$a (times$a ?v1) (uminus$ (numeral$b ?v0))))) :named a221))
(assert (! (forall ((?v0 Num$)) (not (= 1.0 (- (numeral$ ?v0))))) :named a222))
(assert (! (forall ((?v0 Num$)) (not (= (numeral$ ?v0) (- 1.0)))) :named a223))
(assert (! (forall ((?v0 Real_set$)) (! (= (uminus$a ?v0) (minus$a top$ ?v0)) :pattern ((uminus$a ?v0)))) :named a224))
(assert (! (forall ((?v0 Real)) (= (* (- 1.0) ?v0) (- ?v0))) :named a225))
(assert (! (forall ((?v0 Num1_bit0$)) (= (fun_app$a (times$a (uminus$ (numeral$b one$))) ?v0) (uminus$ ?v0))) :named a226))
(assert (! (forall ((?v0 Real)) (= (* ?v0 (- 1.0)) (- ?v0))) :named a227))
(assert (! (forall ((?v0 Num1_bit0$)) (= (fun_app$a (times$a ?v0) (uminus$ (numeral$b one$))) (uminus$ ?v0))) :named a228))
(assert (! (= (- 1.0) (- 1.0)) :named a229))
(assert (! (= (uminus$ (numeral$b one$)) (uminus$ one$d)) :named a230))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$g (times$c ?v0) one$a) ?v0)) :named a231))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$g (times$c one$a) ?v0) ?v0)) :named a232))
(assert (! (forall ((?v0 Real)) (! (= (fun_app$b top$d ?v0) (member$ ?v0 top$)) :pattern ((fun_app$b top$d ?v0)))) :named a233))
(assert (! (forall ((?v0 Num$)) (= (- (- 1.0) (numeral$ ?v0)) (- (numeral$ (inc$ ?v0))))) :named a234))
(assert (! (forall ((?v0 Num$)) (= (minus$ (uminus$ one$d) (numeral$b ?v0)) (uminus$ (numeral$b (inc$ ?v0))))) :named a235))
(assert (! (forall ((?v0 Num$)) (= (- (numeral$ ?v0) (- 1.0)) (numeral$ (inc$ ?v0)))) :named a236))
(assert (! (forall ((?v0 Num$)) (= (minus$ (numeral$b ?v0) (uminus$ one$d)) (numeral$b (inc$ ?v0)))) :named a237))
(assert (! (forall ((?v0 Num$)) (= (- (- (sub$ ?v0 one$)) 1.0) (- (numeral$ ?v0)))) :named a238))
(assert (! (forall ((?v0 Num$)) (= (minus$ (uminus$ (sub$a ?v0 one$)) one$d) (uminus$ (numeral$b ?v0)))) :named a239))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (- (numeral$ ?v0) (numeral$ ?v1)) (sub$ ?v0 ?v1))) :named a240))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (minus$ (numeral$b ?v0) (numeral$b ?v1)) (sub$a ?v0 ?v1))) :named a241))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (- (- (numeral$ ?v0)) (- (numeral$ ?v1))) (sub$ ?v1 ?v0))) :named a242))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (minus$ (uminus$ (numeral$b ?v0)) (uminus$ (numeral$b ?v1))) (sub$a ?v1 ?v0))) :named a243))
(assert (! (forall ((?v0 Num$)) (= (- (numeral$ ?v0) 1.0) (sub$ ?v0 one$))) :named a244))
(assert (! (forall ((?v0 Num$)) (= (minus$ (numeral$b ?v0) one$d) (sub$a ?v0 one$))) :named a245))
(assert (! (forall ((?v0 Num$)) (= (- 1.0 (numeral$ ?v0)) (sub$ one$ ?v0))) :named a246))
(assert (! (forall ((?v0 Num$)) (= (minus$ one$d (numeral$b ?v0)) (sub$a one$ ?v0))) :named a247))
(assert (! (forall ((?v0 Num$)) (= (- (- (numeral$ ?v0)) (- 1.0)) (sub$ one$ ?v0))) :named a248))
(assert (! (forall ((?v0 Num$)) (= (minus$ (uminus$ (numeral$b ?v0)) (uminus$ one$d)) (sub$a one$ ?v0))) :named a249))
(assert (! (forall ((?v0 Num$)) (= (- (- 1.0) (- (numeral$ ?v0))) (sub$ ?v0 one$))) :named a250))
(assert (! (forall ((?v0 Num$)) (= (minus$ (uminus$ one$d) (uminus$ (numeral$b ?v0))) (sub$a ?v0 one$))) :named a251))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$b (minus$b ?v0 ?v1) ?v2) (minus$b (minus$b ?v0 ?v2) ?v1))) :named a252))
(assert (! (forall ((?v0 Num$)) (= (sub$ (inc$ ?v0) one$) (numeral$ ?v0))) :named a253))
(assert (! (forall ((?v0 Num$)) (= (sub$a (inc$ ?v0) one$) (numeral$b ?v0))) :named a254))
(assert (! (forall ((?v0 Num_bool_fun$) (?v1 Num$)) (=> (and (fun_app$c ?v0 one$) (forall ((?v2 Num$)) (=> (fun_app$c ?v0 ?v2) (fun_app$c ?v0 (inc$ ?v2))))) (fun_app$c ?v0 ?v1))) :named a255))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (! (= (sub$ ?v0 ?v1) (- (numeral$ ?v0) (numeral$ ?v1))) :pattern ((sub$ ?v0 ?v1)))) :named a256))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (! (= (sub$a ?v0 ?v1) (minus$ (numeral$b ?v0) (numeral$b ?v1))) :pattern ((sub$a ?v0 ?v1)))) :named a257))
(assert (! (= (inc$ one$) (bit0$ one$)) :named a258))
(assert (! (forall ((?v0 Num$)) (! (= (sub$ one$ (bit0$ ?v0)) (- (numeral$ (bitM$ ?v0)))) :pattern ((bit0$ ?v0)))) :named a259))
(assert (! (forall ((?v0 Num$)) (! (= (sub$a one$ (bit0$ ?v0)) (uminus$ (numeral$b (bitM$ ?v0)))) :pattern ((bit0$ ?v0)))) :named a260))
(assert (! (forall ((?v0 Num$)) (! (= (sub$ (bit0$ ?v0) one$) (numeral$ (bitM$ ?v0))) :pattern ((bit0$ ?v0)))) :named a261))
(assert (! (forall ((?v0 Num$)) (! (= (sub$a (bit0$ ?v0) one$) (numeral$b (bitM$ ?v0))) :pattern ((bit0$ ?v0)))) :named a262))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (- (- ?v0) (- ?v1)) (- (- ?v0 ?v1)))) :named a263))
(assert (! (= (bitM$ one$) one$) :named a264))
(assert (! (forall ((?v0 Num$)) (= (inc$ (bitM$ ?v0)) (bit0$ ?v0))) :named a265))
(assert (! (forall ((?v0 Num$)) (= (numeral$ (bitM$ ?v0)) (- (numeral$ (bit0$ ?v0)) 1.0))) :named a266))
(assert (! (forall ((?v0 Num$)) (= (numeral$b (bitM$ ?v0)) (minus$ (numeral$b (bit0$ ?v0)) one$d))) :named a267))
(assert (! (forall ((?v0 Num$)) (= (fun_app$ dbl_dec$ (numeral$ ?v0)) (numeral$ (bitM$ ?v0)))) :named a268))
(assert (! (forall ((?v0 Num$)) (= (dbl_dec$a (numeral$b ?v0)) (numeral$b (bitM$ ?v0)))) :named a269))
(assert (! (forall ((?v0 Num$)) (= (+ (- 1.0) (numeral$ ?v0)) (sub$ ?v0 one$))) :named a270))
(assert (! (forall ((?v0 Num$)) (= (plus$ (uminus$ one$d) (numeral$b ?v0)) (sub$a ?v0 one$))) :named a271))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$a ?v0 ?v1) (plus$a ?v0 ?v2)) (= ?v1 ?v2))) :named a272))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$a ?v0 ?v1) (plus$a ?v2 ?v1)) (= ?v0 ?v2))) :named a273))
(assert (! (forall ((?v0 Num$) (?v1 Num_set$) (?v2 Num$) (?v3 Num_set$)) (=> (and (member$a ?v0 ?v1) (member$a ?v2 ?v3)) (member$a (plus$b ?v0 ?v2) (plus$c ?v1 ?v3)))) :named a274))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (member$b ?v0 ?v1) (member$b ?v2 ?v3)) (member$b (plus$a ?v0 ?v2) (plus$d ?v1 ?v3)))) :named a275))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (! (= (plus$b (bit0$ ?v0) (bit0$ ?v1)) (bit0$ (plus$b ?v0 ?v1))) :pattern ((plus$b (bit0$ ?v0) (bit0$ ?v1))))) :named a276))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$b (minus$b ?v0 ?v1) ?v2) (minus$b ?v0 (plus$a ?v1 ?v2)))) :named a277))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (- (+ ?v0 ?v1) ?v1) ?v0)) :named a278))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (minus$b (plus$a ?v0 ?v1) ?v1) ?v0)) :named a279))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (- (+ ?v0 ?v1) (+ ?v2 ?v1)) (- ?v0 ?v2))) :named a280))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$b (plus$a ?v0 ?v1) (plus$a ?v2 ?v1)) (minus$b ?v0 ?v2))) :named a281))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (- (+ ?v0 ?v1) ?v0) ?v1)) :named a282))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (minus$b (plus$a ?v0 ?v1) ?v0) ?v1)) :named a283))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (- (+ ?v0 ?v1) (+ ?v0 ?v2)) (- ?v1 ?v2))) :named a284))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$b (plus$a ?v0 ?v1) (plus$a ?v0 ?v2)) (minus$b ?v1 ?v2))) :named a285))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (+ (- ?v0 ?v1) ?v1) ?v0)) :named a286))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (- (+ ?v0 ?v1) ?v1) ?v0)) :named a287))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Real)) (= (+ (numeral$ ?v0) (+ (numeral$ ?v1) ?v2)) (+ (numeral$ (plus$b ?v0 ?v1)) ?v2))) :named a288))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Nat$)) (= (plus$a (numeral$a ?v0) (plus$a (numeral$a ?v1) ?v2)) (plus$a (numeral$a (plus$b ?v0 ?v1)) ?v2))) :named a289))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Num1_bit0$)) (= (plus$ (numeral$b ?v0) (plus$ (numeral$b ?v1) ?v2)) (plus$ (numeral$b (plus$b ?v0 ?v1)) ?v2))) :named a290))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (+ (numeral$ ?v0) (numeral$ ?v1)) (numeral$ (plus$b ?v0 ?v1)))) :named a291))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (plus$a (numeral$a ?v0) (numeral$a ?v1)) (numeral$a (plus$b ?v0 ?v1)))) :named a292))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (plus$ (numeral$b ?v0) (numeral$b ?v1)) (numeral$b (plus$b ?v0 ?v1)))) :named a293))
(assert (! (= (plus$b one$ one$) (bit0$ one$)) :named a294))
(assert (! (= (fun_app$ dbl_dec$ 1.0) 1.0) :named a295))
(assert (! (= (dbl_dec$a one$d) one$d) :named a296))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Num$)) (= (fun_app$ (times$ (+ ?v0 ?v1)) (numeral$ ?v2)) (+ (fun_app$ (times$ ?v0) (numeral$ ?v2)) (fun_app$ (times$ ?v1) (numeral$ ?v2))))) :named a297))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Num$)) (= (fun_app$g (times$c (plus$a ?v0 ?v1)) (numeral$a ?v2)) (plus$a (fun_app$g (times$c ?v0) (numeral$a ?v2)) (fun_app$g (times$c ?v1) (numeral$a ?v2))))) :named a298))
(assert (! (forall ((?v0 Num1_bit0$) (?v1 Num1_bit0$) (?v2 Num$)) (= (fun_app$a (times$a (plus$ ?v0 ?v1)) (numeral$b ?v2)) (plus$ (fun_app$a (times$a ?v0) (numeral$b ?v2)) (fun_app$a (times$a ?v1) (numeral$b ?v2))))) :named a299))
(assert (! (forall ((?v0 Num$) (?v1 Real) (?v2 Real)) (= (fun_app$ (times$ (numeral$ ?v0)) (+ ?v1 ?v2)) (+ (fun_app$ (times$ (numeral$ ?v0)) ?v1) (fun_app$ (times$ (numeral$ ?v0)) ?v2)))) :named a300))
(assert (! (forall ((?v0 Num$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$g (times$c (numeral$a ?v0)) (plus$a ?v1 ?v2)) (plus$a (fun_app$g (times$c (numeral$a ?v0)) ?v1) (fun_app$g (times$c (numeral$a ?v0)) ?v2)))) :named a301))
(assert (! (forall ((?v0 Num$) (?v1 Num1_bit0$) (?v2 Num1_bit0$)) (= (fun_app$a (times$a (numeral$b ?v0)) (plus$ ?v1 ?v2)) (plus$ (fun_app$a (times$a (numeral$b ?v0)) ?v1) (fun_app$a (times$a (numeral$b ?v0)) ?v2)))) :named a302))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (+ (- ?v0) ?v1) (- ?v1 ?v0))) :named a303))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (- ?v0 (- ?v1)) (+ ?v0 ?v1))) :named a304))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Real)) (= (+ (- (numeral$ ?v0)) (+ (- (numeral$ ?v1)) ?v2)) (+ (- (numeral$ (plus$b ?v0 ?v1))) ?v2))) :named a305))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Num1_bit0$)) (= (plus$ (uminus$ (numeral$b ?v0)) (plus$ (uminus$ (numeral$b ?v1)) ?v2)) (plus$ (uminus$ (numeral$b (plus$b ?v0 ?v1))) ?v2))) :named a306))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (+ (- (numeral$ ?v0)) (- (numeral$ ?v1))) (- (+ (numeral$ ?v0) (numeral$ ?v1))))) :named a307))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (plus$ (uminus$ (numeral$b ?v0)) (uminus$ (numeral$b ?v1))) (uminus$ (plus$ (numeral$b ?v0) (numeral$b ?v1))))) :named a308))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (- (- (numeral$ ?v0)) (numeral$ ?v1)) (- (numeral$ (plus$b ?v0 ?v1))))) :named a309))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (minus$ (uminus$ (numeral$b ?v0)) (numeral$b ?v1)) (uminus$ (numeral$b (plus$b ?v0 ?v1))))) :named a310))
(check-sat)
;;(get-proof)
