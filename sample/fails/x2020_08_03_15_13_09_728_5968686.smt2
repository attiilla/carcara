; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat$ 0)
(declare-sort S_set$ 0)
(declare-sort S_v_hd$ 0)
(declare-sort S_v_tm$ 0)
(declare-sort Hmultiset$ 0)
(declare-sort V_s_set_fun$ 0)
(declare-fun ta$ () S_v_tm$)
(declare-fun one$ () Enat$)
(declare-fun head$ (S_v_tm$) S_v_hd$)
(declare-fun zero$ () Hmultiset$)
(declare-fun delta$ () Nat$)
(declare-fun member$ (S$ S_set$) Bool)
(declare-fun of_nat$ (Nat$) Hmultiset$)
(declare-fun wt_sym$ (S$) Hmultiset$)
(declare-fun epsilon$ () Nat$)
(declare-fun arity_sym$ (S$) Enat$)
(declare-fun ground_heads$ (V_s_set_fun$ S_v_hd$) S_set$)
(declare-fun ground_heads_var$ () V_s_set_fun$)
(assert (! (not (= (of_nat$ delta$) (of_nat$ epsilon$))) :named a0))
(assert (! (forall ((?v0 S$)) (=> (and (= (arity_sym$ ?v0) one$) (= (wt_sym$ ?v0) zero$)) (= (of_nat$ delta$) (of_nat$ epsilon$)))) :named a1))
(assert (! (exists ((?v0 S$)) (and (member$ ?v0 (ground_heads$ ground_heads_var$ (head$ ta$))) (and (= (arity_sym$ ?v0) one$) (= (wt_sym$ ?v0) zero$)))) :named a2))
(check-sat)
