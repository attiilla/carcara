; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort V$ 0)
(declare-sort Nat$ 0)
(declare-sort S_set$ 0)
(declare-sort S_v_hd$ 0)
(declare-sort S_v_tm$ 0)
(declare-sort Nat_s_fun$ 0)
(declare-sort S_nat_fun$ 0)
(declare-sort S_v_tm_set$ 0)
(declare-sort S_v_tm_list$ 0)
(declare-sort V_s_set_fun$ 0)
(declare-sort S_s_bool_fun_fun$ 0)
(declare-sort S_s_v_tm_s_v_tm_bool_fun_fun_s_v_tm_list_s_v_tm_list_bool_fun_fun_fun_fun$ 0)
(declare-fun x$ () V$)
(declare-fun db$ () Nat_s_fun$)
(declare-fun gt$ (S_s_bool_fun_fun$ S_nat_fun$ S_s_v_tm_s_v_tm_bool_fun_fun_s_v_tm_list_s_v_tm_list_bool_fun_fun_fun_fun$ V_s_set_fun$ S_v_tm$ S_v_tm$) Bool)
(declare-fun ia$ () Nat$)
(declare-fun sa$ () S_v_tm$)
(declare-fun ta$ () S_v_tm$)
(declare-fun uu$ () V_s_set_fun$)
(declare-fun lam$ () S$)
(declare-fun one$ () Nat$)
(declare-fun set$ (S_v_tm_list$) S_v_tm_set$)
(declare-fun sup$ (S_v_tm_set$ S_v_tm_set$) S_v_tm_set$)
(declare-fun sym$ (S$) S_v_hd$)
(declare-fun top$ () S_set$)
(declare-fun args$ (S_v_tm$) S_v_tm_list$)
(declare-fun extf$ () S_s_v_tm_s_v_tm_bool_fun_fun_s_v_tm_list_s_v_tm_list_bool_fun_fun_fun_fun$)
(declare-fun head$ (S_v_tm$) S_v_hd$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun gt_sym$ () S_s_bool_fun_fun$)
(declare-fun member$ (S_v_tm$ S_v_tm_set$) Bool)
(declare-fun wt_sym$ () S_nat_fun$)
(declare-fun fun_app$ (V_s_set_fun$ V$) S_set$)
(declare-fun subst_db$ (S$ Nat_s_fun$ Nat$ V$ S_v_tm$) S_v_tm$)
(assert (! (forall ((?v0 V$)) (! (= (fun_app$ uu$ ?v0) top$) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (forall ((?v0 S_v_tm$)) (=> (member$ ?v0 (sup$ (set$ (args$ ta$)) (set$ (args$ sa$)))) (forall ((?v1 S_v_tm$)) (=> (member$ ?v1 (sup$ (set$ (args$ ta$)) (set$ (args$ sa$)))) (forall ((?v2 S_v_tm$)) (=> (and (member$ ?v2 (sup$ (set$ (args$ ta$)) (set$ (args$ sa$)))) (and (gt$ gt_sym$ wt_sym$ extf$ uu$ (subst_db$ lam$ db$ (ite (= (head$ sa$) (sym$ lam$)) (plus$ ia$ one$) ia$) x$ ?v0) (subst_db$ lam$ db$ (ite (= (head$ sa$) (sym$ lam$)) (plus$ ia$ one$) ia$) x$ ?v1)) (gt$ gt_sym$ wt_sym$ extf$ uu$ (subst_db$ lam$ db$ (ite (= (head$ sa$) (sym$ lam$)) (plus$ ia$ one$) ia$) x$ ?v1) (subst_db$ lam$ db$ (ite (= (head$ sa$) (sym$ lam$)) (plus$ ia$ one$) ia$) x$ ?v2)))) (gt$ gt_sym$ wt_sym$ extf$ uu$ (subst_db$ lam$ db$ (ite (= (head$ sa$) (sym$ lam$)) (plus$ ia$ one$) ia$) x$ ?v0) (subst_db$ lam$ db$ (ite (= (head$ sa$) (sym$ lam$)) (plus$ ia$ one$) ia$) x$ ?v2))))))))) :named a1))
(assert (! (forall ((?v0 S_v_tm$) (?v1 S_v_tm$) (?v2 S_v_tm$)) (=> (and (gt$ gt_sym$ wt_sym$ extf$ uu$ ?v0 ?v1) (gt$ gt_sym$ wt_sym$ extf$ uu$ ?v1 ?v2)) (gt$ gt_sym$ wt_sym$ extf$ uu$ ?v0 ?v2))) :named a2))
(check-sat)
