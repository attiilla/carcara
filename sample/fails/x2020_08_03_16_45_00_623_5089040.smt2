; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=20
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort S_v_tm$ 0)
(declare-sort Nat_set$ 0)
(declare-fun ta$ () S_v_tm$)
(declare-fun ua$ () S_v_tm$)
(declare-fun arg$ (S_v_tm$) S_v_tm$)
(declare-fun bot$ () Nat_set$)
(declare-fun max$ (Nat_set$) Nat$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun max$a (Nat$ Nat$) Nat$)
(declare-fun size$ (S_v_tm$) Nat$)
(declare-fun is_Hd$ (S_v_tm$) Bool)
(declare-fun finite$ (Nat_set$) Bool)
(declare-fun insert$ (Nat$ Nat_set$) Nat_set$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(assert (! (forall ((?v0 S_v_tm$)) (=> (not (is_Hd$ ?v0)) (less$ (size$ (arg$ ?v0)) (size$ ?v0)))) :named a0))
(assert (! (less$ (size$ ta$) (size$ ua$)) :named a1))
(assert (! (not (is_Hd$ ta$)) :named a2))
(assert (! (not (is_Hd$ ua$)) :named a3))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat$)) (=> (and (finite$ ?v0) (not (= ?v0 bot$))) (= (max$ (insert$ ?v1 ?v0)) (max$a ?v1 (max$ ?v0))))) :named a4))
(assert (! (forall ((?v0 Nat$)) (= (max$ (insert$ ?v0 bot$)) ?v0)) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (less$ ?v0 ?v1) (less$ ?v2 ?v0)) (less$ ?v2 ?v1))) :named a6))
(assert (! (finite$ bot$) :named a7))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat$)) (=> (finite$ ?v0) (finite$ (insert$ ?v1 ?v0)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (max$a ?v0 ?v1) (ite (less_eq$ ?v0 ?v1) ?v1 ?v0))) :named a9))
(assert (! (not (less$ (max$ (insert$ (size$ (arg$ ta$)) (insert$ (size$ ta$) (insert$ (size$ (arg$ ua$)) bot$)))) (size$ ua$))) :named a10))
(check-sat)
;;;;(get-proof)
